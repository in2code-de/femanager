plugin.tx_femanager {
  view {
    templateRootPaths {
      0 = EXT:femanager/Resources/Private/Templates/
      1 = {$plugin.tx_femanager.view.templateRootPath}
    }

    partialRootPaths {
      0 = EXT:femanager/Resources/Private/Partials/
      1 = {$plugin.tx_femanager.view.partialRootPath}
    }

    layoutRootPaths {
      0 = EXT:femanager/Resources/Private/Layouts/
      1 = {$plugin.tx_femanager.view.layoutRootPath}
    }
  }

  persistence {
    storagePid = {$plugin.tx_femanager.persistence.storagePid}
  }

  features {
    #skipDefaultArguments = 1
    requireCHashArgumentForActionArguments = 0
  }

  settings {

    ###################################
    # Settings for CREATE user profiles
    ###################################
    new {
      # take username and copy it to the email field (so email field is not necessary in FE)
      #      fillEmailWithUsername = 1

      # login after profile creation (don't work if admin confirmation is turned on). The experimental
      # feature "Set cookie on login" in EM may help in case of login problems
      login = 1

      # prefilling (empty) input fields with values from TypoScript
      prefill {
        #        username = TEXT
        #        username.value = ExampleUsername

        #        email = TEXT
        #        email.value = test@in2code.de
      }

      # redirect user (or admin if adminconfirmation) after profile creation (could be a PID, URL or fileadmin-Link)
      #      redirect = TEXT
      #      redirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after profile creation request (only if user confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      requestRedirect = TEXT
      #      requestRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after user clicks confirmation link in email (only if user confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      userConfirmationRedirect = TEXT
      #      userConfirmationRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after user clicks refuse link in confirmation email (only if user confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      userConfirmationRefusedRedirect = TEXT
      #      userConfirmationRefusedRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect admin after admin clicks confirmation link in email (only if admin confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      adminConfirmationRedirect = TEXT
      #      adminConfirmationRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect admin after admin clicks refuse link in email (only if admin confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      adminConfirmationRefusedRedirect = TEXT
      #      adminConfirmationRefusedRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect admin after admin clicks silent-refuse link in email (only if admin confirmation is activated) (could be a PID, URL or fileadmin-Link)
      #      adminConfirmationRefusedSilentRedirect = TEXT
      #      adminConfirmationRefusedSilentRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # validation of user input values
      # possible validations for each field are: required, email, min, max, intOnly, lettersOnly, unicodeLettersOnly, uniqueInPage, uniqueInDb, date, mustInclude(number,letter,special,space), mustNotInclude(number,letter,special,space), inList(1,2,3), captcha, sameAs(password)
      # see manual for an example how to add custom serverside and clientside validation
      validation {
        _enable {
          # Enable clientside Formvalidation (JavaScript)
          client = 1

          # Enable serverside Formvalidation (PHP)
          server = 1
        }

        username {
          required = 1
          uniqueInDb = 1
          mustNotInclude = space
        }

        email {
          required = 1
          email = 1
          #uniqueInPage = 1
        }

        password {
          required = 1
          #min = 10
          #mustInclude = number,letter,special
        }

        password_repeat {
          required = 1
          sameAs = password
        }

        usergroup {
          #inList = 1,2,3
        }

        captcha {
          # requires installation of sr_freecap
          #          captcha = 1
        }

        terms {
          # requires to check terms and conditions checkbox
          #          required = 1
        }

        state {
          required = 0
          if = In2code\Femanager\Domain\Validator\ShouldValidateStateCondition
        }
      }


      # All email settings within the creation process
      email {

        # Email for User confirmation (User must confirm his Email address)
        createUserConfirmation {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value = {$plugin.tx_femanager.settings.adminEmail}
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailCreateUserConfirmationSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for Admin confirmation (Admin must confirm registration in an email)
        createAdminConfirmation {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailCreateAdminConfirmationSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          embedImage = COA
          embedImage {
            10 = FILES
            10 {
              references {
                table = fe_users
                fieldName = image
                uid.field = uid
              }

              begin = 0
              maxItems = 1

              renderObj = IMG_RESOURCE
              renderObj {
                file {
                  import.dataWrap = {file:current:storage}:{file:current:identifier}
                  maxW = 120
                  maxH = 120
                }
              }
            }

            #            20 = TEXT
            #            20.wrap = ,|
            #            20.value = fileadmin/image.jpg
          }
        }

        # Email to user to confirm his new profile (with and without admin confirmation)
        createUserNotify {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 0

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value = {$plugin.tx_femanager.settings.adminEmail}
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailCreateUserNotifySubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for User notify, if admin refused profile registration
        createUserNotifyRefused {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value = {$plugin.tx_femanager.settings.adminEmail}
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailCreateUserNotifyRefusedSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for Admin notify, if profile registration
        createAdminNotify {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailCreateNotifySubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          embedImage = COA
          embedImage {
            10 = FILES
            10 {
              references {
                table = fe_users
                fieldName = image
                uid.field = uid
              }

              begin = 0
              maxItems = 1

              renderObj = IMG_RESOURCE
              renderObj {
                file {
                  import.dataWrap = {file:current:storage}:{file:current:identifier}
                  maxW = 120
                  maxH = 120
                }
              }
            }

            #            20 = TEXT
            #            20.wrap = ,|
            #            20.value = fileadmin/image.jpg
          }
        }
      }

      # overwrite any user values with TypoScript
      forceValues {
        # Overwrite initally (default)
        beforeAnyConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 2

          # Set a fix value
          #          email = TEXT
          #          email.value = service@in2code.de
        }

        # Overwrite on user confirmation (only if user confirmation was activated)
        onUserConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 3

          # Set a fix value
          #          company = TEXT
          #          company.value = in2code.de
        }

        # Overwrite on admin confirmation (only if admin confirmation was activated)
        onAdminConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 4

          # Set a fix value
          #          www = TEXT
          #          www.value = http://www.in2code.de
        }
      }

      # Send Form values via POST to another system (e.g. CRM like salesforce or eloqua)
      sendPost {
        # Activate sendPost (0/1)
        #        _enable = TEXT
        #        _enable.value = 0

        # Target URL for POST values (like http://www.target.com/target.php)
        #        targetUrl = https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8

        # build your post datas like &param1=value1&param2=value2
        # !!! take care to validate the incomming data in your receiver script!!!
        #        data = COA
        #        data {
        #          10 = TEXT
        #          10 {
        #            # value from field {username}
        #            field = username
        #            wrap = &username=|
        #            stdWrap.rawUrlEncode = 1
        #          }

        #          20 = TEXT
        #          20 {
        #            # value from field {email}
        #            field = email
        #            wrap = &email=|
        #            stdWrap.rawUrlEncode = 1
        #          }

        #          30 = TEXT
        #          30 {
        #            # value from field {title}
        #            field = title
        #            wrap = &title=|
        #            stdWrap.rawUrlEncode = 1
        #          }
        #        }

        # activate debug mode - shows all configuration from curl settings (needs extension devlog)
        #        debug = 0
      }

      # Save user values to one or more other tables (e.g. tt_address or something else)
      #       With .field=[fieldname] you have access to the user object
      #       Possible values are: uid, username, address, city, company, country, email, fax, firstName, lastName, middleName, name, password, telephone, fax, title, www, zip and uid_[tablename] (to have access to the uid of one of the last loop)
      storeInDatabase {
        #        tt_address {
        #          _enable = TEXT
        #          _enable.value = 0

        #          pid = TEXT
        #          pid.value = 21

        #          name = TEXT
        #          name.field = username

        #          email = TEXT
        #          email.field = email

        #          first_name = TEXT
        #          first_name.field = firstName

        #          last_name = TEXT
        #          last_name.field = lastName
        #        }
      }

      misc {
        # Remove Usergroups from Usergroup Selection in Frontend
        #        removeFromUserGroupSelection = 2,3

        # initially save password as hash ("Argon2i", "Bcrypt", "Pbkdf2", "Phpass", "Blowfish", "Md5" or empty for extension saltedpasswords - if installed)
        #        passwordSave = Md5

        # Configuration for autogenerated Username and Password
        autogenerate {
          username {
            # Length
            length = 6

            # Allow uppercase Characters
            addUpperCase = 0

            # Allow special Characters
            addSpecialCharacters = 0
          }

          password {
            # Length
            length = 10

            # Allow uppercase Characters
            addUpperCase = 1

            # Allow special Characters
            addSpecialCharacters = 1
          }
        }
      }
    }


    ###################################
    # Settings for UPDATE user profiles
    ###################################
    edit {
      # take username and copy it to the email field (so email field is not nessesary in FE)
      #fillEmailWithUsername = 1

      # redirect user (or admin if adminconfirmation) after profile update
      #      redirect = TEXT
      #      redirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after profile update request (only if admin confirmation is activated)
      #      requestRedirect = TEXT
      #      requestRedirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # prefilling (empty) input fields with values from TypoScript
      prefill {
        #        username = TEXT
        #        username.value = ExampleUsername

        #        email = TEXT
        #        email.value = test@in2code.de
      }

      # validation of user input values
      # possible validations for each field are: required, email, min, max, intOnly, lettersOnly, unicodeLettersOnly, uniqueInPage, uniqueInDb, date, mustInclude(number,letter,special,space,uppercase), mustNotInclude(number,letter,uppercase,special,space), inList(1,2,3), captcha, sameAs(password)
      validation {
        _enable {
          # Enable clientside Formvalidation (JavaScript)
          client = 1

          # Enable serverside Formvalidation (PHP)
          server = 1
        }

        username {
          required = 1
          mustNotInclude = space
        }

        email {
          required = 1
          email = 1
        }

        password {
          required = 1
          #min = 10
          #mustInclude = number,letter,special
        }

        password_repeat {
          required = 1
          sameAs = password
        }

        usergroup {
          #inList = 1,2,3
        }

        captcha {
          # requires installation of sr_freecap
          #          captcha = 1
        }
      }

      # All email settings within the update process
      email {

        # Email for admin if user requests update (only if confirmation by admin is activated)
        updateRequest {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailUpdateRequestSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email to user if update request was refused by admin
        updateRequestRefused {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receiver (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value = {$plugin.tx_femanager.settings.adminEmail}
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailUpdateRequestRefusedSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5 (from important to not important)
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for if update request was refused by admin
        notifyAdmin {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receiver (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailUpdateNotifySubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5 (from important to not important)
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }
      }

      # overwrite any user values with TypoScript
      forceValues {
        # Overwrite initally (default) - Note: This values will be updated as soon as the admin confirms the request (if admin confirm is activated)
        beforeAnyConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 2

          # Set a fix value
          #          email = TEXT
          #          email.value = service@in2code.de
        }

        # Overwrite on admin confirmation (only if admin confirmation was activated)
        onAdminConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 3

          # Set a fix value
          #          www = TEXT
          #          www.value = http://www.in2code.de
        }
      }

      misc {
        # Don't change password if it is empty
        keepPasswordIfEmpty = 1

        # Remove Usergroups from Usergroup Selection in Frontend
        #        removeFromUserGroupSelection = 2,3

        # initially save password as hash ("Argon2i", "Bcrypt", "Pbkdf2", "Phpass", "Blowfish", "Md5" or empty for extension saltedpasswords - if installed)
        #        passwordSave = Md5
      }
    }


    ###################################
    # Settings for INVITATION View
    ###################################
    invitation {
      # take username and copy it to the email field (so email field is not nessesary in FE)
      #fillEmailWithUsername = 1

      # redirect admin after step 1
      #      redirectStep1 = TEXT
      #      redirectStep1 {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after profile delete (from email)
      #      redirectDelete = TEXT
      #      redirectDelete {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # redirect user after he changed his password
      #      redirectPasswordChanged = TEXT
      #      redirectPasswordChanged {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }

      # validation of user input values
      # possible validations for each field are: required, email, min, max, intOnly, lettersOnly, unicodeLettersOnly, uniqueInPage, uniqueInDb, date, mustInclude(number,letter,special,space), mustNotInclude(number,letter,special,space), inList(1,2,3), captcha, sameAs(password)
      # Validation for first Step (Create)
      validation {
        _enable {
          # Enable clientside Formvalidation (JavaScript)
          client = 1

          # Enable serverside Formvalidation (PHP)
          server = 1
        }

        username {
          required = 1
          uniqueInDb = 1
          mustNotInclude = space
        }

        email {
          required = 1
          email = 1
        }

        usergroup {
          #inList = 1,2,3
        }

        captcha {
          # requires installation of sr_freecap
          #          captcha = 1
        }
      }

      # Validation for second Step (Edit)
      validationEdit {
        _enable {
          # Enable clientside Formvalidation (JavaScript)
          client = 1

          # Enable serverside Formvalidation (PHP)
          server = 1
        }

        password {
          required = 1
          #min = 10
          #mustInclude = number,letter,special
        }

        password_repeat {
          required = 1
          sameAs = password
        }
      }

      # All email settings within the update process
      email {

        # Email to user for confirmation
        invitation {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value = {$plugin.tx_femanager.settings.adminEmail}
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailInvitationSubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for admin if profile added (only if admin notify is activated)
        invitationAdminNotifyStep1 {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailInvitationAdminNotifiyStep1Subject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for admin if profile added (only if admin notify is activated)
        invitationAdminNotify {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailInvitationAdminNotifiySubject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }

        # Email for admin if user refused profile invitation (only if admin notify on step 1 is activated)
        invitationRefused {
          ##########################
          # Set values (overwrite)
          ##########################

          # (de)activate email completely
          _enable = TEXT
          _enable.value = 1

          # Overwrite Receivers (please fill both)
          receiver {
            email = TEXT
            email.value =
            name = TEXT
            name.value = {$plugin.tx_femanager.settings.adminName}
          }

          # Overwrite Senders (please fill both)
          sender {
            email = TEXT
            email.value =
            name = TEXT
            name.value =
          }

          # Overwrite Subject
          subject = TEXT
          subject.data = LLL:EXT:femanager/Resources/Private/Language/locallang.xlf:emailInvitationUserRefusedAdminNotifiyStep1Subject

          # Set CC receivers
          cc = TEXT
          cc.value =

          # Set mail priority from 1 to 5
          priority = TEXT
          priority.value =

          # Add Attachment (separate each with comma)
          #          attachments = COA
          #          attachments {
          #            10 = TEXT
          #            10.value = fileadmin/file.pdf
          #            10.wrap = |,

          #            20 = TEXT
          #            20.value = fileadmin/file2.pdf
          #            20.wrap = |,
          #          }

          # Add Embed Images (separate each with comma) - can be used in mail with <img src="{embedImages.0}" /> and so on...
          #          embedImage = COA
          #          embedImage {
          #            10 = FILES
          #            10 {
          #              references {
          #                table = fe_users
          #                fieldName = image
          #                uid.field = uid
          #              }

          #              begin = 0
          #              maxItems = 1

          #              renderObj = IMG_RESOURCE
          #              renderObj {
          #                file.import.dataWrap = {file:current:storage}:{file:current:identifier}
          #                file.maxW = 120
          #                file.maxH = 120
          #              }
          #            }

          #            20 = TEXT
          #            20.wrap = ,|
          #            20.value = fileadmin/image.jpg
          #          }
        }
      }

      # overwrite any user values with TypoScript
      forceValues {
        # Overwrite initally (default)
        beforeAnyConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 2

          # Set a fix value
          #          email = TEXT
          #          email.value = service@in2code.de
        }

        # Overwrite on admin confirmation (only if admin confirmation was activated)
        onAdminConfirmation {
          # Usergroups can be set with a commaseparated list
          #          usergroup = TEXT
          #          usergroup.value = 4

          # Set a fix value
          #          www = TEXT
          #          www.value = http://www.in2code.de
        }
      }

      misc {
        # Remove Usergroups from Usergroup Selection in Frontend
        #        removeFromUserGroupSelection = 2,3

        # initially save password as hash ("Argon2i", "Bcrypt", "Pbkdf2", "Phpass", "Blowfish", "Md5" or empty for extension saltedpasswords - if installed)
        #        passwordSave = Md5
      }
    }


    delete {
      # redirect after profile delete
      #      redirect = TEXT
      #      redirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }
    }

    list {
      filter {
        searchword {
          fieldsToSearch = address, city, company, country, email, fax, first_name, image, last_name, middle_name, name, telephone, title, usergroup.title, username, www, zip
        }
      }
    }

    loginAs {
      # redirect when simulate a frontenduser login from administrator
      #      redirect = TEXT
      #      redirect {
      #        typolink {
      #          parameter = 1
      #          returnLast = url
      #          #linkAccessRestrictedPages = 1
      #        }
      #      }
    }

    misc {
      # Where to save new image files
      uploadFolder = {$plugin.tx_femanager.settings.uploadFolder}

      # Number of allowed images to upload
      uploadAmount = 3

      # Maximum size for image upload in bytes
      uploadSize = 25000000

      # Number of allowed images to upload
      uploadFileExtension = jpeg, jpg, gif, png, bmp, tif, tiff

      # Width of the rendered image in FE
      renderImageWidth = 250
    }

    ratelimiter {
      # Number of seconds for the sliding window rate limiter
      timeframe = {$plugin.tx_femanager.settings.ratelimiter.timeframe}
      # Request count. How many requests are allowed in the last <timeframe> seconds. Set to 0 to disable rate limiter.
      limit = {$plugin.tx_femanager.settings.ratelimiter.limit}
    }

    # Add own finisher classes that will be called after registration, profile update, invitation or deletion (e.g. if you want to do something with form values by your own: Save into tables, call an API, etc...)
    finishers {
      # Femanager finishers
      10.class = In2code\Femanager\Finisher\SaveToAnyTableFinisher
      20.class = In2code\Femanager\Finisher\SendParametersFinisher

      #      100 {
      # Classname that should be called with method *Finisher()
      #        class = Vendor\Ext\Finisher\DoSomethingFinisher

      # optional: Add configuration for your PHP
      #        config {
      #          foo = bar

      #          fooCObject = TEXT
      #          fooCObject.value = do something with this text
      #        }

      # optional: If file will not be loaded from autoloader, add path and it will be called with require_once
      #        require = fileadmin/femanager/finisher/DoSomethingFinisher.php
      #      }
    }

    # Add any dataProcessor classes that will be called just before the action will be rendered
    dataProcessors {

      # Remove empty usergroup variables
      10 {
        class = In2code\Femanager\DataProcessor\CleanUserGroup

        events {
          New = create
          Edit = update
        }
      }

      # Enable image upload
      20 {
        class = In2code\Femanager\DataProcessor\ImageManipulation

        config {
          propertyNamesForUpload = image
          sysFileRelation {
            tablenames = fe_users
            fieldname = image
            table_local = sys_file
          }
        }

        events {
          New = create
          Edit = update
        }
      }

      # Birthdate converter
      30 {
        class = In2code\Femanager\DataProcessor\DateConverter

        config {
          fieldNames = dateOfBirth
        }

        events {
          New = create
          Edit = update
        }
      }

      #      100 {
      # Classname that should be called with an existing method process()
      #        class = Vendor\Ext\DataProcessor\DoSomethingDataProcessor

      # optional: Add configuration for your PHP
      #        config {
      #          foo = bar

      #          fooCObject = TEXT
      #          fooCObject.value = do something with this text
      #        }

      # call this class just before this actions will be opened
      #        events {
      #          New = create,createStatus
      #        }
      #      }
    }

    # Add own autoAdminConfirmation classes that can decide if confirmation by admin (only if activated) can be skipped. E.g. if an Email domain fits to a given list.
    autoAdminConfirmation {
      # Femanager autoAdminConfirmation classes
      #      10 {
      #        class = In2code\Femanager\Domain\Service\AutoAdminConfirmation\EmailDomainConfirmation
      #        config {
      # Just look at the domains of the given Email-Addresses
      #          confirmByEmailDomains = .de, .it, .ch, .at
      #          confirmByEmailDomainsExceptions = gmail.de, gmx.de
      #        }
      #      }

      #      100 {
      # Classname that should be called with method isAutoAdminConfirmationFullfilled()
      #        class = In2code\FemanagerExtended\Domain\Service\AutoAdminConfirmation\IpAddressConfirmation

      # optional: Add configuration for your PHP
      #        config {
      #          foo = bar

      #          fooCObject = TEXT
      #          fooCObject.value = do something with this text
      #        }
      #      }
    }

    showResendUserConfirmationRequestView = {$plugin.tx_femanager.settings.showResendUserConfirmationRequestView}

    # Don't touch this - this is needed to let the plugin know if the main typoscript is included - otherwise an errormessage will be shown in the frontend
    _TypoScriptIncluded = 1
  }
}


#########################
# Inlude JavaScript files
#########################
# add jQuery if it was turned on in the constants
[0 < {$plugin.tx_femanager.settings.jQuery}]
page.includeJSFooterlibs {
  femanagerJQuery = //ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js
  femanagerJQuery.external = 1
}
[end]

# add twitter bootstrap JS if it was turned on in the constants
[0 < {$plugin.tx_femanager.settings.bootstrap}]
page.includeJSFooterlibs {
  femanangerBootstrap = //maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js
  femanangerBootstrap.external = 1
}
[end]

#########################
# Inlude CSS files
#########################
# add twitter bootstrap CSS if it was turned on in the constants
[0 < {$plugin.tx_femanager.settings.bootstrapCSS}]
page.includeCSS {
  femanangerBootstrap = //maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css
  femanangerBootstrap.external = 1
}
[end]

page {
  includeCSS {
    femanagerMain = EXT:femanager/Resources/Public/Css/Main.min.css
  }

  includeJSFooter {
    femanagerValidation = EXT:femanager/Resources/Public/JavaScript/Validation.min.js
    femanager = EXT:femanager/Resources/Public/JavaScript/Femanager.min.js
  }
}

##################################################
# Page for frontend validation via AJAX
##################################################
feManagerValidation = PAGE
feManagerValidation {
  typeNum = 1548935210
  config {
    additionalHeaders.10.header = Content-Type: application/json
    no_cache = 0
    disableAllHeaderCode = 1
    disablePrefixComment = 1
    xhtml_cleaning = 0
    admPanel = 0
    debug = 0
  }

  10 = USER_INT
  10 {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = Femanager
    pluginName = Pi1
    vendorName = In2code
    controller = User
    action = validate
    switchableControllerActions.User.1 = validate
    features.requireCHashArgumentForActionArguments = 0
  }
}

feManagerStateSelection = PAGE
feManagerStateSelection {
  typeNum = 1594138042
  config {
    additionalHeaders.10.header = Content-Type: application/json
    no_cache = 0
    disableAllHeaderCode = 1
    disablePrefixComment = 1
    xhtml_cleaning = 0
    admPanel = 0
    debug = 0
  }

  10 = USER_INT
  10 {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = Femanager
    pluginName = Pi1
    vendorName = In2code
    controller = Data
    action = getStatesForCountry
    features.requireCHashArgumentForActionArguments = 0
  }
}
